/*
 *  QuantityPanel.java
 *  
 *  @author Channa Mohan
 *     hjchanna@gmail.com
 *  
 *  Created on Feb 25, 2015, 8:21:20 AM
 *  Copyrights channa mohan, All rights reserved.
 *  
 */
package com.mac.transaction.item_transaction_new.table.columns.popup;

import com.mac.af.component.derived.input.ComponentFocusKeyEvent;
import com.mac.transaction.item_transaction_new.TransactionDetailUtil;
import com.mac.transaction.item_transaction_new.object.MItem;
import com.mac.transaction.item_transaction_new.object.MItemBatch;
import com.mac.transaction.item_transaction_new.object.RTransactionType;
import com.mac.transaction.item_transaction_new.object.TTransactionDetail;
import com.mac.transaction.item_transaction_new.table.columns.PopupPanel;
import com.mac.transaction.transaction_registration.PriceTypes;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Iterator;

/**
 *
 * @author mohan
 */
public class PricePanel extends PopupPanel {

    /**
     * Creates new form QuantityPanel
     */
    public PricePanel(RTransactionType transactionType) {
        initComponents();
        
        this.transactionType = transactionType;
        
        initOthers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initOthers() {
        txtPrice.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    accept();
                }
            }
        });

        ComponentFocusKeyEvent.remove(txtPrice);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cDLabel1 = new com.mac.af.component.derived.display.label.CDLabel();
        txtPrice = new com.mac.af.component.derived.input.textfield.CIDoubleField();

        cDLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cDLabel1.setText("PRICE");
        cDLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cDLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cDLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mac.af.component.derived.display.label.CDLabel cDLabel1;
    private com.mac.af.component.derived.input.textfield.CIDoubleField txtPrice;
    // End of variables declaration//GEN-END:variables
    private RTransactionType transactionType;

    @Override
    protected void onInitializeView(TTransactionDetail transactionDetail1) {
        MItem item = transactionDetail1.getMItem();

        MItemBatch lastBatch = null;
        Iterator<MItemBatch> iterator = item.getMItemBatchs().iterator();
        while (iterator.hasNext()) {
            MItemBatch batch = iterator.next();
            lastBatch = lastBatch != null
                    ? (batch.getBatchNumber() > lastBatch.getBatchNumber()) ? batch : lastBatch
                    : batch;
        }

        transactionDetail1.setMItemBatch(lastBatch);

        switch (transactionType.getPriceType()) {
            case PriceTypes.SALES_PRICE:
                transactionDetail1.setPrice(lastBatch.getSalePrice());
                break;
            case PriceTypes.LAST_SALE_PRICE:
                transactionDetail1.setPrice(lastBatch.getLastSalesPrice());
                break;
            case PriceTypes.WHOLE_SALE_PRICE:
                transactionDetail1.setPrice(lastBatch.getWholeSalePrice());
                break;
            case PriceTypes.COST_PRICE:
                transactionDetail1.setPrice(lastBatch.getCostPrice());
                break;
            default:
                transactionDetail1.setPrice(0.0);
        }

        transactionDetail1.setDiscount(0.0);

        txtPrice.requestFocus();
        txtPrice.setCValue(transactionDetail1.getPrice());
    }

    @Override
    protected void onAccept(TTransactionDetail transactionDetail1) {
        transactionDetail1.setPrice(txtPrice.getCValue());

        TransactionDetailUtil.calculateNetValues(transactionDetail1);
    }

    @Override
    protected boolean isValueAcceptable() {
        return true;
    }

    @Override
    public void resetView() {
        txtPrice.resetValue();
    }
}

package com.mac.transaction.item_transaction_new.object;

/**
  *	@author Channa Mohan
  *	
  *	Created On Mar 20, 2015 9:41:46 AM 
  *	Mohan Hibernate Mapping Generator
  */


import java.util.HashSet;
import java.util.Set;

/**
 * MStore generated by hbm2java
 */
public class MStore  implements java.io.Serializable {


     private String hash;
     private String code;
     private String branch;
     private String name;
     private boolean active;
     private Set<TSerialMovement> TSerialMovementsForOutStore = new HashSet<TSerialMovement>(0);
     private Set<TItemMovement> TItemMovements = new HashSet<TItemMovement>(0);
     private Set<TTransactionSummary> TTransactionSummariesForInStore = new HashSet<TTransactionSummary>(0);
     private Set<TSerialMovement> TSerialMovementsForInStore = new HashSet<TSerialMovement>(0);
     private Set<TTransactionSummary> TTransactionSummariesForOutStore = new HashSet<TTransactionSummary>(0);
     private Set<TTransactionDetail> TTransactionDetailsForInStore = new HashSet<TTransactionDetail>(0);
     private Set<TTransactionDetail> TTransactionDetailsForOutStore = new HashSet<TTransactionDetail>(0);
     private Set<RTransactionType> RTransactionTypesForInStore = new HashSet<RTransactionType>(0);
     private Set<RTransactionType> RTransactionTypesForOutStore = new HashSet<RTransactionType>(0);

    public MStore() {
    }

	
    public MStore(String hash, String code, String branch, String name, boolean active) {
        this.hash = hash;
        this.code = code;
        this.branch = branch;
        this.name = name;
        this.active = active;
    }
    public MStore(String hash, String code, String branch, String name, boolean active, Set<TSerialMovement> TSerialMovementsForOutStore, Set<TItemMovement> TItemMovements, Set<TTransactionSummary> TTransactionSummariesForInStore, Set<TSerialMovement> TSerialMovementsForInStore, Set<TTransactionSummary> TTransactionSummariesForOutStore, Set<TTransactionDetail> TTransactionDetailsForInStore, Set<TTransactionDetail> TTransactionDetailsForOutStore, Set<RTransactionType> RTransactionTypesForInStore, Set<RTransactionType> RTransactionTypesForOutStore) {
       this.hash = hash;
       this.code = code;
       this.branch = branch;
       this.name = name;
       this.active = active;
       this.TSerialMovementsForOutStore = TSerialMovementsForOutStore;
       this.TItemMovements = TItemMovements;
       this.TTransactionSummariesForInStore = TTransactionSummariesForInStore;
       this.TSerialMovementsForInStore = TSerialMovementsForInStore;
       this.TTransactionSummariesForOutStore = TTransactionSummariesForOutStore;
       this.TTransactionDetailsForInStore = TTransactionDetailsForInStore;
       this.TTransactionDetailsForOutStore = TTransactionDetailsForOutStore;
       this.RTransactionTypesForInStore = RTransactionTypesForInStore;
       this.RTransactionTypesForOutStore = RTransactionTypesForOutStore;
    }
   
    public String getHash() {
        return this.hash;
    }
    
    public void setHash(String hash) {
        this.hash = hash;
    }
    public String getCode() {
        return this.code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }
    public String getBranch() {
        return this.branch;
    }
    
    public void setBranch(String branch) {
        this.branch = branch;
    }
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    public boolean isActive() {
        return this.active;
    }
    
    public void setActive(boolean active) {
        this.active = active;
    }
    public Set<TSerialMovement> getTSerialMovementsForOutStore() {
        return this.TSerialMovementsForOutStore;
    }
    
    public void setTSerialMovementsForOutStore(Set<TSerialMovement> TSerialMovementsForOutStore) {
        this.TSerialMovementsForOutStore = TSerialMovementsForOutStore;
    }
    public Set<TItemMovement> getTItemMovements() {
        return this.TItemMovements;
    }
    
    public void setTItemMovements(Set<TItemMovement> TItemMovements) {
        this.TItemMovements = TItemMovements;
    }
    public Set<TTransactionSummary> getTTransactionSummariesForInStore() {
        return this.TTransactionSummariesForInStore;
    }
    
    public void setTTransactionSummariesForInStore(Set<TTransactionSummary> TTransactionSummariesForInStore) {
        this.TTransactionSummariesForInStore = TTransactionSummariesForInStore;
    }
    public Set<TSerialMovement> getTSerialMovementsForInStore() {
        return this.TSerialMovementsForInStore;
    }
    
    public void setTSerialMovementsForInStore(Set<TSerialMovement> TSerialMovementsForInStore) {
        this.TSerialMovementsForInStore = TSerialMovementsForInStore;
    }
    public Set<TTransactionSummary> getTTransactionSummariesForOutStore() {
        return this.TTransactionSummariesForOutStore;
    }
    
    public void setTTransactionSummariesForOutStore(Set<TTransactionSummary> TTransactionSummariesForOutStore) {
        this.TTransactionSummariesForOutStore = TTransactionSummariesForOutStore;
    }
    public Set<TTransactionDetail> getTTransactionDetailsForInStore() {
        return this.TTransactionDetailsForInStore;
    }
    
    public void setTTransactionDetailsForInStore(Set<TTransactionDetail> TTransactionDetailsForInStore) {
        this.TTransactionDetailsForInStore = TTransactionDetailsForInStore;
    }
    public Set<TTransactionDetail> getTTransactionDetailsForOutStore() {
        return this.TTransactionDetailsForOutStore;
    }
    
    public void setTTransactionDetailsForOutStore(Set<TTransactionDetail> TTransactionDetailsForOutStore) {
        this.TTransactionDetailsForOutStore = TTransactionDetailsForOutStore;
    }
    public Set<RTransactionType> getRTransactionTypesForInStore() {
        return this.RTransactionTypesForInStore;
    }
    
    public void setRTransactionTypesForInStore(Set<RTransactionType> RTransactionTypesForInStore) {
        this.RTransactionTypesForInStore = RTransactionTypesForInStore;
    }
    public Set<RTransactionType> getRTransactionTypesForOutStore() {
        return this.RTransactionTypesForOutStore;
    }
    
    public void setRTransactionTypesForOutStore(Set<RTransactionType> RTransactionTypesForOutStore) {
        this.RTransactionTypesForOutStore = RTransactionTypesForOutStore;
    }


	@Override
     public String toString() {
		return code + "-" + name;
     }




	@Override
	public boolean equals(Object other) {
        if ( (this == other ) ){
			return true;
		}
		
		if ( (other == null ) ){
			return false;
		}
		
		if ( !(other instanceof MStore) ){
			return false;
		}
		
		MStore castOther = ( MStore ) other; 

		if(this.code==null && castOther.code==null) {
			return false;
		}
		
		if(!java.util.Objects.equals(this.code, castOther.code)) {
            return false;
		}
        
		return true;
   }

    @Override
    public int hashCode() {
        int result = 17;
         
		result = result * 17 + java.util.Objects.hashCode(this.code);

        return result;
    }




}



/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mac.registration.item_price_change;

import com.mac.af.component.model.table.CTableColumn;
import com.mac.af.component.model.table.CTableModel;
import com.mac.af.panel.object.CInputComponentBinder;
import com.mac.af.panel.object.DefaultObjectCreator;
import com.mac.af.panel.object.ObjectCreatorException;
import com.mac.registration.item_price_change.object.MItem;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author thilanga
 */
public class PCItemPriceChange extends DefaultObjectCreator<MItem> {

    /**
     * Creates new form PCItemPriceChange
     */
    public PCItemPriceChange() {
        initComponents();
        initOthers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initOthers() {
        tblBatch.setCModel(new CTableModel(
                new CTableColumn("Batch No", "batchNumber"),
                new CTableColumn("Cost Price", "costPrice"),
                new CTableColumn("WholeSale Price", "wholeSalePrice"),
                new CTableColumn("Last Price", "lastSalesPrice"),
                new CTableColumn("Sales Price", "salePrice")));

        FocusAdapter focusAdapter = new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                try {
                    calculateDefaultPercentages();
                } catch (ObjectCreatorException ex) {
                    Logger.getLogger(PCItemPriceChange.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        txtCostPrice.addFocusListener(focusAdapter);
        txtSalesPrice.addFocusListener(focusAdapter);
        txtLastSalePrice.addFocusListener(focusAdapter);
        txtWholeSalePrice.addFocusListener(focusAdapter);
    }

    private void calculateDefaultPrices() throws ObjectCreatorException {
        if (getValueAbstract() != null) {
            MItem item = getValueAbstract();

            double costPrice = txtCostPrice.getCValue();
            double salesMargin = item.getSaleMargin();
            double wholesaleMargin = item.getWholeSaleMargin();
            double maxDiscountPercent = item.getMaxDiscountPercent();

            double salesPrice = PriceCalculation.getSalesPrice(costPrice, salesMargin);
            double lastSalesPrice = PriceCalculation.getLastSalePrice(salesPrice, maxDiscountPercent);
            double wholesalePrice = PriceCalculation.getWholeSalePrice(costPrice, wholesaleMargin);

            txtSalesPrice.setCValue(salesPrice);
            txtLastSalePrice.setCValue(lastSalesPrice);
            txtWholeSalePrice.setCValue(wholesalePrice);
        }
    }

    private void calculateDefaultPercentages() throws ObjectCreatorException {
        if (getValueAbstract() != null) {
            costPrice = txtCostPrice.getCValue();
            double salesPrice = txtSalesPrice.getCValue();
            double lastSalesPrice = txtLastSalePrice.getCValue();
            double wholeSalePrice = txtWholeSalePrice.getCValue();

            salesMargin = (salesPrice - costPrice) / costPrice * 100;
            wholesaleMargin = (wholeSalePrice - costPrice) / costPrice * 100;
            maxDiscountPercent = (salesPrice - lastSalesPrice) / salesPrice * 100;

//            txtSaleMargin.setCValue(salesMargin);
//            txtWholeSalePriceMargin.setCValue(wholesaleMargin);
//            txtMaxDiscountPrecent.setCValue(maxDiscountPercent);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cDLabel1 = new com.mac.af.component.derived.display.label.CDLabel();
        txtLastSalePrice = new com.mac.af.component.derived.input.textfield.CIDoubleField();
        cDLabel4 = new com.mac.af.component.derived.display.label.CDLabel();
        cDLabel2 = new com.mac.af.component.derived.display.label.CDLabel();
        txtSalesPrice = new com.mac.af.component.derived.input.textfield.CIDoubleField();
        txtCostPrice = new com.mac.af.component.derived.input.textfield.CIDoubleField();
        cDLabel3 = new com.mac.af.component.derived.display.label.CDLabel();
        txtWholeSalePrice = new com.mac.af.component.derived.input.textfield.CIDoubleField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBatch = new com.mac.af.component.derived.input.table.CITable();

        cDLabel1.setText("Sale Price:");

        txtLastSalePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastSalePriceActionPerformed(evt);
            }
        });

        cDLabel4.setText("Cost Price:");

        cDLabel2.setText("Last Sale Price:");

        txtSalesPrice.setText("");
        txtSalesPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalesPriceActionPerformed(evt);
            }
        });

        txtCostPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostPriceActionPerformed(evt);
            }
        });

        cDLabel3.setText("Whole Sale Price:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cDLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cDLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cDLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cDLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(txtCostPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(txtLastSalePrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtWholeSalePrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cDLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cDLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cDLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastSalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cDLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWholeSalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Current Prices", jPanel1);

        tblBatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblBatch);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Batch History", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtLastSalePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastSalePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastSalePriceActionPerformed

    private void txtCostPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostPriceActionPerformed

    private void txtSalesPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalesPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalesPriceActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mac.af.component.derived.display.label.CDLabel cDLabel1;
    private com.mac.af.component.derived.display.label.CDLabel cDLabel2;
    private com.mac.af.component.derived.display.label.CDLabel cDLabel3;
    private com.mac.af.component.derived.display.label.CDLabel cDLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.mac.af.component.derived.input.table.CITable tblBatch;
    private com.mac.af.component.derived.input.textfield.CIDoubleField txtCostPrice;
    private com.mac.af.component.derived.input.textfield.CIDoubleField txtLastSalePrice;
    private com.mac.af.component.derived.input.textfield.CIDoubleField txtSalesPrice;
    private com.mac.af.component.derived.input.textfield.CIDoubleField txtWholeSalePrice;
    // End of variables declaration//GEN-END:variables
    double costPrice;
    double salesMargin;
    double wholesaleMargin;
    double maxDiscountPercent;

    @Override
    protected List getIdentityComponents() {

        return Arrays.asList();
    }

    @Override
    protected List getEssentialComponents() {
        return Arrays.asList();
    }

    @Override
    protected List getOtherFieldComponents() {
        return Arrays.asList(
                txtCostPrice,
                txtWholeSalePrice,
                txtLastSalePrice,
                txtSalesPrice);
    }

    @Override
    protected List getInputComponentBinders() {
        return Arrays.asList(
                new CInputComponentBinder(txtSalesPrice, "salePrice"),
                new CInputComponentBinder(txtLastSalePrice, "lastSalePrice"),
                new CInputComponentBinder(txtWholeSalePrice, "wholeSalePrice"),
                new CInputComponentBinder(txtCostPrice, "costPrice"),
                new CInputComponentBinder(tblBatch, "MItemBatchs"));

    }

    @Override
    protected Class getObjectClass() {
        return MItem.class;
    }

    @Override
    public void setValue(MItem value) throws ObjectCreatorException {
        super.setValue(value);

        if (value != null) {
            costPrice = value.getCostPrice();
            salesMargin = value.getSaleMargin();
            wholesaleMargin = value.getWholeSaleMargin();
            maxDiscountPercent = value.getMaxDiscountPercent();
        }
    }
}
